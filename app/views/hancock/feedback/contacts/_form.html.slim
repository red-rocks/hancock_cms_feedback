ruby:
  is_cache_fields ||= ['new', 'index'].include? action_name
  cache_key ||= 'hancock_feedback_contacts_fields'.freeze
  if Hancock::Feedback.config.model_settings_support
    settings_scope ||= Hancock::Feedback::ContactMessage.settings
  elsif defined?(Settings)
    settings_scope ||= Settings.ns('feedback')
  end
  fields_partial ||= "hancock/feedback/contacts/#{(Hancock::Feedback.config.model_settings_support ? 'fields_with_settings' : 'fields')}".freeze
  recaptcha_options ||= {}
  _cache_helper = (Hancock::Feedback.config.cache_support ? :hancock_cache : :cache)
  autofocus_field ||= :name
  @contact_message ||= Hancock::Feedback::ContactMessage.new

/ = simple_form_for @contact_message, url: hancock_feedback_contacts_path do |f|
= simple_form_for @contact_message, url: hancock_feedback_contacts_path, html: {data: {remote: true }} do |f|
  .fields_block
    - if is_cache_fields
      - send _cache_helper, cache_key do
        = render partial: fields_partial, locals: {f: f, cache_key: "views/#{cache_key}", settings_scope: settings_scope, autofocus_field: autofocus_field}
    - else
      = render partial: fields_partial, locals: {f: f, settings_scope: settings_scope, autofocus_field: autofocus_field}

  - if settings_scope.captcha(default: Hancock::Feedback.config.captcha, kind: :boolean, label: "Использовать капчу?")
    - if Hancock::Feedback.config.recaptcha_support
      .input.recaptcha_field
        - if @recaptcha_error
          span.error.recaptcha_error= @recaptcha_error
        = recaptcha_tags(recaptcha_options)
    - elsif Hancock::Feedback.config.simple_captcha_support
      = render partial: "hancock/feedback/contacts/simple_captcha", locals: {f: f, settings_scope: settings_scope}

  - if Hancock::Feedback.config.model_settings_support
    - label = settings_scope.submit_label(default: t('hancock.send'), label: "Текст на кнопке отправки")
  - else
    - label = t('hancock.send')
  .submit_button_wrapper
    = f.submit label, class: 'submit_button'
